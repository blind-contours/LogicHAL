// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// computeF1ScoresWithLogic
Rcpp::List computeF1ScoresWithLogic(DataFrame data, CharacterVector columns, IntegerVector outcome, LogicalVector previous_rule, std::string previous_rule_name);
RcppExport SEXP _LogicHAL_computeF1ScoresWithLogic(SEXP dataSEXP, SEXP columnsSEXP, SEXP outcomeSEXP, SEXP previous_ruleSEXP, SEXP previous_rule_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type previous_rule(previous_ruleSEXP);
    Rcpp::traits::input_parameter< std::string >::type previous_rule_name(previous_rule_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(computeF1ScoresWithLogic(data, columns, outcome, previous_rule, previous_rule_name));
    return rcpp_result_gen;
END_RCPP
}
// computeMeanDifferenceScoresWithLogic
Rcpp::List computeMeanDifferenceScoresWithLogic(DataFrame data, CharacterVector columns, NumericVector outcome, Nullable<LogicalVector> previous_rule, std::string previous_rule_name);
RcppExport SEXP _LogicHAL_computeMeanDifferenceScoresWithLogic(SEXP dataSEXP, SEXP columnsSEXP, SEXP outcomeSEXP, SEXP previous_ruleSEXP, SEXP previous_rule_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< Nullable<LogicalVector> >::type previous_rule(previous_ruleSEXP);
    Rcpp::traits::input_parameter< std::string >::type previous_rule_name(previous_rule_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMeanDifferenceScoresWithLogic(data, columns, outcome, previous_rule, previous_rule_name));
    return rcpp_result_gen;
END_RCPP
}
// computePairwiseLogicInteractions
Rcpp::List computePairwiseLogicInteractions(DataFrame data, List pairs, IntegerVector outcome);
RcppExport SEXP _LogicHAL_computePairwiseLogicInteractions(SEXP dataSEXP, SEXP pairsSEXP, SEXP outcomeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type outcome(outcomeSEXP);
    rcpp_result_gen = Rcpp::wrap(computePairwiseLogicInteractions(data, pairs, outcome));
    return rcpp_result_gen;
END_RCPP
}
// computeThreeWayLogicInteractions
Rcpp::List computeThreeWayLogicInteractions(DataFrame data, List triples, IntegerVector outcome);
RcppExport SEXP _LogicHAL_computeThreeWayLogicInteractions(SEXP dataSEXP, SEXP triplesSEXP, SEXP outcomeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< List >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type outcome(outcomeSEXP);
    rcpp_result_gen = Rcpp::wrap(computeThreeWayLogicInteractions(data, triples, outcome));
    return rcpp_result_gen;
END_RCPP
}
// create_basis_functions
DataFrame create_basis_functions(DataFrame data, CharacterVector columns, int num_knots, int precision);
RcppExport SEXP _LogicHAL_create_basis_functions(SEXP dataSEXP, SEXP columnsSEXP, SEXP num_knotsSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< int >::type num_knots(num_knotsSEXP);
    Rcpp::traits::input_parameter< int >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(create_basis_functions(data, columns, num_knots, precision));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LogicHAL_computeF1ScoresWithLogic", (DL_FUNC) &_LogicHAL_computeF1ScoresWithLogic, 5},
    {"_LogicHAL_computeMeanDifferenceScoresWithLogic", (DL_FUNC) &_LogicHAL_computeMeanDifferenceScoresWithLogic, 5},
    {"_LogicHAL_computePairwiseLogicInteractions", (DL_FUNC) &_LogicHAL_computePairwiseLogicInteractions, 3},
    {"_LogicHAL_computeThreeWayLogicInteractions", (DL_FUNC) &_LogicHAL_computeThreeWayLogicInteractions, 3},
    {"_LogicHAL_create_basis_functions", (DL_FUNC) &_LogicHAL_create_basis_functions, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_LogicHAL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
