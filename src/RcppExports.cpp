// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// computeF1ScoresWithLogic
Rcpp::List computeF1ScoresWithLogic(DataFrame data, CharacterVector columns, IntegerVector outcome, Nullable<LogicalVector> previous_rule, std::string previous_rule_name);
RcppExport SEXP _LogicHAL_computeF1ScoresWithLogic(SEXP dataSEXP, SEXP columnsSEXP, SEXP outcomeSEXP, SEXP previous_ruleSEXP, SEXP previous_rule_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< Nullable<LogicalVector> >::type previous_rule(previous_ruleSEXP);
    Rcpp::traits::input_parameter< std::string >::type previous_rule_name(previous_rule_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(computeF1ScoresWithLogic(data, columns, outcome, previous_rule, previous_rule_name));
    return rcpp_result_gen;
END_RCPP
}
// computeMeanDifferenceScoresWithLogic
Rcpp::List computeMeanDifferenceScoresWithLogic(DataFrame data, CharacterVector columns, NumericVector outcome, Nullable<LogicalVector> previous_rule, std::string previous_rule_name);
RcppExport SEXP _LogicHAL_computeMeanDifferenceScoresWithLogic(SEXP dataSEXP, SEXP columnsSEXP, SEXP outcomeSEXP, SEXP previous_ruleSEXP, SEXP previous_rule_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type columns(columnsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type outcome(outcomeSEXP);
    Rcpp::traits::input_parameter< Nullable<LogicalVector> >::type previous_rule(previous_ruleSEXP);
    Rcpp::traits::input_parameter< std::string >::type previous_rule_name(previous_rule_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMeanDifferenceScoresWithLogic(data, columns, outcome, previous_rule, previous_rule_name));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LogicHAL_computeF1ScoresWithLogic", (DL_FUNC) &_LogicHAL_computeF1ScoresWithLogic, 5},
    {"_LogicHAL_computeMeanDifferenceScoresWithLogic", (DL_FUNC) &_LogicHAL_computeMeanDifferenceScoresWithLogic, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_LogicHAL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
